import android.opengl.GLES20;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

public class EllipseRenderer implements GLSurfaceView.Renderer {
    private FloatBuffer vertexBuffer;
    private final int numSegments = 100;
    private final float[] ellipseVertices = new float[(numSegments + 2) * 2];
    private int program;

    @Override
    public void onSurfaceCreated(javax.microedition.khronos.egl.EGLConfig config) {
        // Vertex Shader
        String vertexShaderCode = 
            "attribute vec4 vPosition;" +
            "void main() {" +
            "  gl_Position = vPosition;" +
            "}";

        // Fragment Shader
        String fragmentShaderCode =
            "precision mediump float;" +
            "uniform vec4 vColor;" +
            "void main() {" +
            "  gl_FragColor = vColor;" +
            "}";

        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode);
        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode);

        // Create program
        program = GLES20.glCreateProgram();
        GLES20.glAttachShader(program, vertexShader);
        GLES20.glAttachShader(program, fragmentShader);
        GLES20.glLinkProgram(program);

        // Generate ellipse vertices
        generateEllipseVertices(0.0f, 0.0f, 0.5f, 0.3f, numSegments);
        vertexBuffer = ByteBuffer.allocateDirect(ellipseVertices.length * 4)
                .order(ByteOrder.nativeOrder())
                .asFloatBuffer();
        vertexBuffer.put(ellipseVertices);
        vertexBuffer.position(0);
    }

    @Override
    public void onDrawFrame(javax.microedition.khronos.opengles.GL10 gl) {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
        GLES20.glUseProgram(program);

        int positionHandle = GLES20.glGetAttribLocation(program, "vPosition");
        GLES20.glEnableVertexAttribArray(positionHandle);
        GLES20.glVertexAttribPointer(positionHandle, 2, GLES20.GL_FLOAT, false, 0, vertexBuffer);

        // Set color for fill
        int colorHandle = GLES20.glGetUniformLocation(program, "vColor");
        GLES20.glUniform4f(colorHandle, 0.8f, 0.1f, 0.1f, 1.0f); // Red

        // Draw filled ellipse
        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_FAN, 0, numSegments + 2);

        // Set color for border
        GLES20.glUniform4f(colorHandle, 0.0f, 1.0f, 0.0f, 1.0f); // Green
        GLES20.glDrawArrays(GLES20.GL_LINE_LOOP, 1, numSegments);

        GLES20.glDisableVertexAttribArray(positionHandle);
    }

    @Override
    public void onSurfaceChanged(javax.microedition.khronos.opengles.GL10 gl, int width, int height) {
        GLES20.glViewport(0, 0, width, height);
    }

    private void generateEllipseVertices(float cx, float cy, float rx, float ry, int numSegments) {
        ellipseVertices[0] = cx;
        ellipseVertices[1] = cy;
        for (int i = 0; i <= numSegments; i++) {
            float theta = (float) (2.0 * Math.PI * i / numSegments);
            ellipseVertices[(i + 1) * 2] = cx + rx * (float) Math.cos(theta);
            ellipseVertices[(i + 1) * 2 + 1] = cy + ry * (float) Math.sin(theta);
        }
    }

    private int loadShader(int type, String shaderCode) {
        int shader = GLES20.glCreateShader(type);
        GLES20.glShaderSource(shader, shaderCode);
        GLES20.glCompileShader(shader);
        return shader;
    }
}

